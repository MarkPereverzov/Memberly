"""
–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç-–ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π
"""
import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

from config.config import ConfigManager, BotConfig
from src.account_manager import AccountManager
from src.group_manager import GroupManager
from src.cooldown_manager import CooldownManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
os.makedirs(log_dir, exist_ok=True)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler(os.path.join(log_dir, 'bot.log'), encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class InviteBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞-–ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
        script_dir = os.path.dirname(os.path.abspath(__file__))
        config_dir = os.path.join(script_dir, 'config')
        
        self.config_manager = ConfigManager(config_dir)
        self.account_manager = AccountManager(self.config_manager)
        self.group_manager = GroupManager(self.config_manager)
        self.cooldown_manager = CooldownManager()
        
        self.bot_config = self.config_manager.bot_config
        self.application = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        await self.account_manager.initialize()
        self.group_manager.initialize()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        self.application = Application.builder().token(self.bot_config.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("invite", self.invite_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        self.application.add_handler(CommandHandler("block", self.block_user_command))
        self.application.add_handler(CommandHandler("unblock", self.unblock_user_command))
        self.application.add_handler(CommandHandler("reset", self.reset_stats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.bot_config.admin_user_ids
    
    def _is_whitelisted(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"""
        return user_id in self.bot_config.whitelist_user_ids or self._is_admin(user_id)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-–ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –Ω–∞—à–∏ –≥—Ä—É–ø–ø—ã.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /invite - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å
‚Ä¢ /help - –ü–æ–º–æ—â—å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /invite
        """
        
        await update.message.reply_text(
            welcome_text, 
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def invite_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /invite"""
        user = update.effective_user
        user_id = user.id
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user.username})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
        if not self._is_whitelisted(user_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        can_invite, cooldown_message = self.cooldown_manager.can_user_request_invite(user_id)
        if not can_invite:
            await update.message.reply_text(f"‚è∞ {cooldown_message}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        available_groups = self.group_manager.get_available_groups_for_user(user_id)
        if not available_groups:
            await update.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –≥—Ä—É–ø–ø—É
        target_group = self.group_manager.select_best_group_for_user(user_id)
        if not target_group:
            await update.message.reply_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –≥—Ä—É–ø–ø—ã
        can_invite_group, group_message = self.cooldown_manager.can_invite_to_group(target_group.group_id)
        if not can_invite_group:
            await update.message.reply_text(f"‚è∞ {group_message}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        account = self.account_manager.get_available_account(target_group.group_id)
        if not account:
            await update.message.reply_text(
                "üòî –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        await update.message.reply_text("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ...")
        
        success = await self.account_manager.send_invite(
            account, user_id, target_group.invite_link
        )
        
        if success:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            self.cooldown_manager.record_invite_attempt(user_id, target_group.group_id, True)
            self.group_manager.record_invitation(user_id, target_group.group_id)
            
            await update.message.reply_text(
                f"‚úÖ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\\n\\n"
                f"–ì—Ä—É–ø–ø–∞: {target_group.group_name}\\n"
                f"–°—Å—ã–ª–∫–∞: {target_group.invite_link}\\n\\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.",
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            self.cooldown_manager.record_invite_attempt(user_id, target_group.group_id, False)
            
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        
        if not self._is_whitelisted(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = self.cooldown_manager.get_user_stats(user_id)
        
        status_text = f"""
üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å**

üé´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_stats['invite_count_today']}/{self.cooldown_manager.max_invites_per_day}
üéØ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {user_stats['remaining_invites']}

{"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user_stats['is_blocked'] else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"}

{"‚è∞ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ" if user_stats['can_invite'] else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞"}
        """
        
        await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cooldown_stats = self.cooldown_manager.get_global_stats()
        account_stats = self.account_manager.get_account_stats()
        group_stats = self.group_manager.get_group_stats()
        
        stats_text = f"""
üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {cooldown_stats['total_users']}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {cooldown_stats['active_blocks']}
üé´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {cooldown_stats['total_invites_today']}

**–ê–∫–∫–∞—É–Ω—Ç—ã:**
üë§ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {account_stats['total_accounts']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {account_stats['active_accounts']}
üì§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {account_stats['total_daily_invites']}

**–ì—Ä—É–ø–ø—ã:**
üè¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {group_stats['total_groups']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {group_stats['active_groups']}
üì• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã: {group_stats['total_daily_invites']}
        """
        
        await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–ü–æ–º–æ—â—å**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /invite - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:**
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /invite
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –¥–µ–Ω—å
‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤ 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton("üë• –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="admin_accounts")
            ],
            [
                InlineKeyboardButton("üè¢ –ì—Ä—É–ø–ø—ã", callback_data="admin_groups"),
                InlineKeyboardButton("‚è∞ –ö—É–ª–¥–∞—É–Ω—ã", callback_data="admin_cooldowns")
            ],
            [
                InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_reset"),
                InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="admin_cleanup")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def block_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /block"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <user_id> [hours]")
            return
        
        try:
            user_id = int(context.args[0])
            hours = int(context.args[1]) if len(context.args) > 1 else 24
            
            self.cooldown_manager.block_user(user_id, hours)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.")
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")
    
    async def unblock_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unblock"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <user_id>")
            return
        
        try:
            user_id = int(context.args[0])
            self.cooldown_manager.unblock_user(user_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    async def reset_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        
        self.cooldown_manager.reset_daily_stats()
        self.account_manager.reset_daily_stats()
        self.group_manager.reset_daily_stats()
        
        await update.message.reply_text("‚úÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if not self._is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        if query.data == "admin_stats":
            await self._show_detailed_stats(query)
        elif query.data == "admin_accounts":
            await self._show_account_details(query)
        elif query.data == "admin_groups":
            await self._show_group_details(query)
        elif query.data == "admin_cooldowns":
            await self._show_cooldown_details(query)
        elif query.data == "admin_reset":
            await self._confirm_reset(query)
        elif query.data == "admin_cleanup":
            await self._perform_cleanup(query)
    
    async def _show_detailed_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        recent_activity = self.cooldown_manager.get_recent_activity(24)
        
        stats_text = "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (24 —á–∞—Å–∞)**\\n\\n"
        
        if recent_activity:
            stats_text += "**–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\\n"
            for activity in recent_activity[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                last_time = datetime.fromtimestamp(activity['last_invite_time'])
                stats_text += f"‚Ä¢ {activity['user_id']}: {activity['invite_count_today']} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –ø–æ—Å–ª–µ–¥–Ω–µ–µ: {last_time.strftime('%H:%M')}\\n"
        else:
            stats_text += "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –±—ã–ª–æ."
        
        await query.edit_message_text(stats_text, parse_mode=ParseMode.MARKDOWN)
    
    async def _show_account_details(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        account_stats = self.account_manager.get_account_stats()
        
        details_text = "üë§ **–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤**\\n\\n"
        
        for account in account_stats['accounts_details']:
            status = "‚úÖ" if account['is_active'] else "‚ùå"
            details_text += f"{status} {account['session_name']}: {account['daily_invites']} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\\n"
        
        await query.edit_message_text(details_text, parse_mode=ParseMode.MARKDOWN)
    
    async def _show_group_details(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø"""
        group_stats = self.group_manager.get_group_stats()
        
        details_text = "üè¢ **–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä—É–ø–ø**\\n\\n"
        
        for group in group_stats['groups_details']:
            status = "‚úÖ" if group['is_active'] else "‚ùå"
            details_text += f"{status} {group['group_name']}: {group['daily_invites']}/{group['max_daily_invites']}\\n"
        
        await query.edit_message_text(details_text, parse_mode=ParseMode.MARKDOWN)
    
    async def _show_cooldown_details(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤"""
        global_stats = self.cooldown_manager.get_global_stats()
        
        details_text = f"""
‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤**

üïê –ö—É–ª–¥–∞—É–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {global_stats['invite_cooldown_seconds']}—Å
üïë –ö—É–ª–¥–∞—É–Ω –≥—Ä—É–ø–ø: {global_stats['group_cooldown_seconds']}—Å
üé´ –ú–∞–∫—Å. –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {global_stats['max_invites_per_day']}

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {global_stats['active_blocks']}
        """
        
        await query.edit_message_text(details_text, parse_mode=ParseMode.MARKDOWN)
    
    async def _confirm_reset(self, query):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.cooldown_manager.reset_daily_stats()
        self.account_manager.reset_daily_stats()
        self.group_manager.reset_daily_stats()
        
        await query.edit_message_text("‚úÖ –í—Å—è –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")
    
    async def _perform_cleanup(self, query):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏"""
        self.cooldown_manager.cleanup_expired_blocks()
        await query.edit_message_text("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
    
    def start_bot(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                loop.run_until_complete(self.initialize())
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º polling
                self.application.run_polling(
                    allowed_updates=Update.ALL_TYPES,
                    drop_pending_updates=True
                )
            finally:
                loop.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        try:
            await self.initialize()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_polling –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop
            await self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        
        try:
            if self.account_manager:
                await self.account_manager.shutdown()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(os.path.join(script_dir, "logs"), exist_ok=True)
    os.makedirs(os.path.join(script_dir, "data"), exist_ok=True)
    os.makedirs(os.path.join(script_dir, "data", "sessions"), exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = InviteBot()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_polling –∫–æ—Ç–æ—Ä–∞—è —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop
        bot.start_bot()
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())